# -*- coding: utf-8 -*-
"""archon_split_analyze.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kHxEJpApxa1CXfH7RDu2p0TRi9afwAar
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pydub
!pip install librosa==0.8.0
from pydub import AudioSegment
import numpy as np
import json as json
import librosa
import math
import os, os.path

destination_db = "/content/drive/My Drive/justatest/" #@param {type:"string"}
directory_db = "/content/drive/My Drive/CompleteFabricMixes_22050/" #@param {type:"string"}
hop_length = "1024" #@param {type:"string"}
sr = "44100" #@param {type:"string"}
output_filename = "analysis.json" #@param {type:"string"}

hop = int(hop_length)
sr = int(sr)
counter = 0
dir_datasize = len([name for name in os.listdir(directory_db) if os.path.isfile(os.path.join(directory_db, name))])
data = []

class SplitWav():
    def __init__(self, filename, destination):
        self.dest = destination
        self.filename = filename
        
        self.audio = AudioSegment.from_wav(self.filename)
    
    def get_duration(self):
        return self.audio.duration_seconds
    
    def single_split(self, from_sec, to_sec, split_filename):
        t1 = from_sec * 1000
        t2 = to_sec * 1000
        split_audio = self.audio[t1:t2]
        split_audio.export(self.dest + '/' + split_filename, format="wav")
        
    def multiple_split(self, filebase, sec_per_split):
        total_sec = int(self.get_duration())
        for i in range(0, total_sec, sec_per_split):
            filebase = filebase.rsplit( ".", 1)[0]
            split_fn = str(filebase) + "_" + str(i) + ".wav"
            self.single_split(i, i + sec_per_split, split_fn)

for filename in os.scandir(directory_db):
  if (filename.path.endswith(".wav")):  
    split_wav = SplitWav(filename, destination_db)
    split_wav.multiple_split(filename.name, sec_per_split = 3)
    counter += 1
    print("completed " + str(counter) + " of " + str(dir_datasize))

counter = 0
dest_datasize = len([name for name in os.listdir(destination_db) if os.path.isfile(os.path.join(destination_db, name))])

for filename in os.scandir(destination_db):
  if (filename.path.endswith(".wav")):
    y, sr = librosa.load(filename, sr=sr)
    c_buff = []
    f_buff = []
    r_buff = []
    v_buff = []
    p_buff = []
    c_buff.append(
        np.ndarray.flatten(
        librosa.feature.spectral_centroid(y=y, sr=sr, hop_length=hop)))
    f_buff.append(
        np.ndarray.flatten(
        librosa.feature.spectral_flatness(y=y, hop_length=hop)))
    r_buff.append(
        np.ndarray.flatten(
        librosa.feature.spectral_rolloff(y=y, sr=sr, hop_length=hop)))
    v_buff.append(
        np.ndarray.flatten(
        librosa.feature.rms(y=y, hop_length=hop)))
    p_buff.append(
        np.ndarray.flatten(
        librosa.yin(y,80,10000, hop_length=hop)))
    id = filename.name

    data.append({ 
        id: {
            "cent": str(np.median(c_buff)),
            "flat": str(np.median(f_buff)),
            "rolloff": str(np.median(r_buff)),
            "rms": str(np.median(v_buff)),
            "f0": str(np.median(p_buff)) 
            }})

    counter += 1
    print("completed " + str(counter) + " of " + str(dest_datasize))

print(data)

savefile = output_filename
with open(savefile, 'a') as outfile:
  json.dump(data, outfile, indent=2)

print(savefile)