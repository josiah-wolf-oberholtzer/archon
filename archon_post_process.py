# -*- coding: utf-8 -*-
"""archon_post_process.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10dECmN90nEcz1pN8tFjz19CdqsZC9Pw6
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import json as json
import pandas as pd
import matplotlib.pyplot as plt

analysis_filename = "/content/drive/My Drive/analysis_f.json" #@param {type:"string"}

## IMPORT JSON FILE
def json_load (filename):
  f = open(filename)
  l = json.load(f)
  return l

## COLLECT STATS

def unpack_json(dict_ = d_lib, metric = "cent", pitched = "both"):

  data = []

  for entry in d_lib:
    filename = k
    sample = v

    if (pitched == "both"):
      if (metric == "pitch"): data.append(sample.get(metric[:-1]))
      else: data.append(float(sample.get(metric)))

    else if (pitched == "pitched"):
      if (sample.get(pitch) != "unpitched"):
        if (metric == "pitch"): data.append(sample.get(metric))
        else: data.append(float(sample.get(metric)))

    else if (pitched == "unpitched"):
      if (sample.get(pitch) == "unpitched"):
        if (metric == "pitch"): 
          print ("ERROR - check function args")
          break
        else: data.append(float(sample.get(metric)))

  return data

def histogram(dict_ = d_lib, metric = "cent", pitched = "both", min, max):
  plt.rcParams["figure.figsize"] = [17.50, 11]
  plt.rcParams["figure.autolayout"] = True

  print("starting graph")
  x = np.sort(
          np.array(
              unpack_json(
                  dict_, metric, pitched)))
  HIST_BINS = np.linspace(min, max, 100)

  plt.title((metric + " Distribution"))
  n = plt.hist(x, HIST_BINS)
 
  plt.xlabel(metric)
  plt.ylabel('Magnitude')

  plt.show()

d_lib = json_load(analysis_filename)

histogram(d_lib, "cent", "both", 0, 10000, "Centroid")
#pitched < 4k, peak around 2.2k
#unpitched >2.2k, peak around 3.2k, goes until 8k or so

histogram(d_lib, "flat", "both", 0, 0.1)
## unpitched flatness is much greater generally than pitched flatness

histogram(d_lib, "rolloff", "both", 0, 18000)
#pitched < 7.5k generally, peak around 4-5k
# unpitched 4k-15k, peaks throughout, much of the center of gravity between 4k and 12.5k

histogram(d_lib, "rms", "unpitched", 0, 0.5)

x = pd.Series(
        unpack_json(
            d_lib, "pitch", "both")
        ).value_counts()
x.plot(kind='bar')
## most information is nonpitched, though about 1/6th of the elements are pitched