# -*- coding: utf-8 -*-
"""archon_split.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kHxEJpApxa1CXfH7RDu2p0TRi9afwAar
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pydub
from pydub import AudioSegment
import math
import os, os.path

destination_db = "/content/drive/My Drive/IRCMS_GAN_collaborative_database/Experiments/colab-violingan/archon-analysis" #@param {type:"string"}
directory_db = "/content/drive/My Drive/IRCMS_GAN_collaborative_database/Experiments/colab-violingan/unagan-outputs" #@param {type:"string"}
des_datasize = "if known" #@param {type:"string"}
dir_datasize = "if known" #@param {type:"string"}
slice_size = "2" #@param {type:"string"}

slice_size = int(slice_size)
counter = 0

# OPTIONAL
# dest_datasize = len(
    # [name for name in os.listdir(destination_db) if os.path.isfile(
        # os.path.join(destination_db, name))])
# NOTE: depending on size of folder, this can error out multiple times - 
#Colab will cache the results, so retry until success and log the number for future attempts.
# print(dest_datasize)

class SplitWav():
    def __init__(self, filename, destination):
        self.dest = destination
        self.filename = filename
        
        self.audio = AudioSegment.from_wav(self.filename)
    
    def get_duration(self):
        return self.audio.duration_seconds
    
    def single_split(self, from_sec, to_sec, split_filename):
        t1 = from_sec * 1000
        t2 = to_sec * 1000
        split_audio = self.audio[t1:t2]
        split_audio.export(self.dest + '/' + split_filename, format="wav")
        
    def multiple_split(self, filebase, sec_per_split):
        total_sec = int(self.get_duration())
        for i in range(0, total_sec, sec_per_split):
            filebase = filebase.rsplit( ".", 1)[0]
            split_fn = str(filebase) + "_" + str(i) + ".wav"
            self.single_split(i, i + sec_per_split, split_fn)

for filename in os.scandir(directory_db):
  if (filename.path.endswith(".wav")):  
    split_wav = SplitWav(filename, destination_db)
    split_wav.multiple_split(filename.name, sec_per_split = slice_size)
    counter += 1
    print("completed " + str(counter) + " of " + str(dir_datasize))